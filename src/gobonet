#!/bin/bash

# Avoid locale surprises when parsing commands.
export LANG=C
export LC_ALL=C

wifi_dir="$HOME/.cache/GoboNet/wifi"

function detect_wifi_interface() {
   for iface in /sys/class/net/*
   do
       if grep -q "DEVTYPE=wlan" "$iface/uevent" || [ -e "$iface/phy80211" ]
       then
          basename "$iface"
          return
       fi
   done
}

function detect_wired_interface() {
   for iface in /sys/class/net/*
   do
       if egrep -q "DEVTYPE=(wlan|bridge)" "$iface/uevent" \
          || [ -e "$iface/phy80211" ] \
          || [[ "$iface" =~ ^docker ]] \
          || [[ "$iface" =~ ^veth ]]
       then
          continue
       fi
       if [ "$(cat "$iface/type")" = "1" ] # ethernet
       then
          basename "$iface"
          return
       fi
   done
}

function is_wired_interface_plugged() {
   [ "$wired_interface" ] || return 1
   gobonet_backend interface-up "$wired_interface"
   [ "$(cat /sys/class/net/$wired_interface/carrier)" = 1 ]
}

function show_dialog() {
   local question_type=password
   local dialog_title=
   local dialog_text=
   local backend=any
   
   for arg in "$@"
   do
      case "$arg" in
         --password)
            question_type=password
            ;;
         --msgbox)
            question_type=msgbox
            ;;
         --question)
            question_type=yesno
            ;;
         --title=*)
            dialog_title=${arg#--title=}
            ;;
         --text=*)
            dialog_text=${arg#--text=}
            ;;
         --backend=*)
            backend=${arg#--backend=}
            ;;
      esac
   done
   
   if [ "$backend" = "pinentry" ] || { [ "$backend" = "any" ] && [ "$DISPLAY" ] && which pinentry &> /dev/null ;}
   then
      case "$question_type" in
         password)
            echo -e "SETTITLE $dialog_title\nSETDESC Please enter password\nSETPROMPT Password:\nGETPIN\n" | pinentry | grep "^D " | cut -b3-
            ;;
         msgbox)
            echo -e "SETTITLE $dialog_title\nSETDESC $dialog_text\nMESSAGE\n" | pinentry &> /dev/null
            return 0
            ;;
         yesno)
            if echo -e "SETTITLE $dialog_title\nSETDESC $dialog_text\nSETOK Yes\nSETCANCEL No\nCONFIRM\n" | pinentry | grep -q "^ERR "
            then
               return 1
            else
               return 0
            fi
            ;;
      esac
   elif [ "$backend" = "zenity" ] || { [ "$backend" = "any" ] && [ "$DISPLAY" ] && which zenity &> /dev/null ;}
   then
      case "$question_type" in
         password)
            zenity --no-markup --password --title="$dialog_title" 
            ;;
         msgbox)
            zenity --no-markup --info --title="$dialog_title" --text="$dialog_text"
            return 0
            ;;
         yesno)
            zenity --no-markup --question --title="$dialog_title" --text="$dialog_text"
            ;;
      esac
   else
      # CLI pure Bash backend
      if [ "$dialog_title" != "" ]
      then
         echo "----------------------------------------" > /dev/tty
         echo "$dialog_title" > /dev/tty
         echo "----------------------------------------" > /dev/tty
         echo "" > /dev/tty
      fi
      case "$question_type" in
         password)
            echo -n "Password: " > /dev/tty
            read -s password
            echo "$password"
            ;;
         msgbox)
            echo "$dialog_text" > /dev/tty
            echo "(Press Enter)" > /dev/tty
            read
            return 0
            ;;
         yesno)
            while true
            do
               echo "$dialog_text (y/n)" > /dev/tty
               read 
               if [ "${REPLY:0:1}" = "y" -o "${REPLY:0:1}" = "Y" ]
               then
                  return 0
               elif [ "${REPLY:0:1}" = "n" -o "${REPLY:0:1}" = "N" ]
               then
                  return 1
               fi
            done
            ;;
      esac
   fi
}

function network_config_file() {
   local essid="$1"
   local sanit=$(echo "$essid" | tr -Cd '[:alnum:]')
   echo "$sanit-"$(echo "$essid" | md5sum | cut -d' ' -f1)
}

function connect_wifi() {   
   local essid="$1"
   local no_password="$2"
   local file="$(network_config_file "$essid")"
   
   if ! [ -e "$wifi_dir/$file" ]
   then

      info=$(gobonet_backend quick-scan "$wifi_interface" | grep -B 1 -F "ESSID:\"$essid\"")
      if [ $? != 0 ]
      then
         info=$(gobonet_backend full-scan "$wifi_interface" | grep -B 1 -F "ESSID:\"$essid\"")
      fi
      info=$(echo "$info" | head -n 2)
      if [ "$no_password" = "no_password" ] || echo "$info" | grep "Encryption key:off"
      then
         {
            echo "network={"
            echo "   ssid=\"$essid\""
            echo "   key_mgmt=NONE"
            echo "}"
         } > "$wifi_dir/$file"
      else
         mkdir -p "$wifi_dir" || return 1
         chmod 0700 "$wifi_dir" || return 1
         pass=$(show_dialog --password --title="Connect to $essid")
         if [ $? = 1 ]
         then
            return 1
         fi
         echo "$pass" | wpa_passphrase "$essid" > "$wifi_dir/$file"
         if [ $? = 1 ]
         then
            show_dialog --msgbox --title="Error" --text="$(grep -v " *#" "$wifi_dir/$file")"
            rm "$wifi_dir/$file"
            return 1
         fi
      fi
   fi
   
   echo $$ > "$wifi_dir/.connecting.pid"
   if gobonet_backend connect "$wifi_dir/$file" "$wifi_interface"
   then
      return 0
   else
      disconnect
      return 1
   fi
}

function connect_wired() {
   disconnect
   gobonet_backend connect-dhcp "$wired_interface"
}

function disconnect() {
   [ "$wifi_interface"  ] && gobonet_backend disconnect "$wifi_interface"
   [ "$wired_interface" ] && gobonet_backend disconnect "$wired_interface"
}

function forget_wifi() {
   local essid="$1"
   local file="$(network_config_file "$essid")"
   
   if show_dialog --question --title="Forget $essid" --text="Are you sure you want to forget network '$essid'?"
   then
      disconnect
      rm -f "$wifi_dir/$file"
   fi   
}

function list_wifi_networks() {
   echo "Available networks:"
   echo 
   
   gobonet_backend full-scan "$wifi_interface" 2> /dev/null | grep ESSID | sed "s,.*ESSID:\(.*\),\1,g;s,\\\\x00,,g"
   
   echo
   echo "Type"
   echo "   gobonet connect \"<network>\""
   echo "to connect."
}

function is_connected() {
   [ "$1" ] || return 1
   if [ "$1" = "$wifi_interface" ]
   then
      grep -q -w "$wifi_interface" /proc/net/wireless || return 1
   fi
   ifconfig "$1" | grep -q -w "UP" && ifconfig "$1" | grep -q "inet6\? addr:"
}

function autoconnect() {
   if [ "$SSH_CONNECTION" ]
   then
      echo "gobonet: Will not autoconnect over a remote login." 1>&2
      exit 1
   fi
   if is_wired_interface_plugged "$wired_interface"
   then
      if ! is_connected "$wired_interface"
      then
         gobonet_backend connect-dhcp "$wired_interface" && exit 0
      fi
   fi
   if is_connected "$wifi_interface"
   then
      echo "gobonet: Interface $wifi_interface is already connected." 1>&2
      exit 1
   fi

   # Sort available networks by signal strength.
   # Use a temp file to avoid holding the gobonet_backend process
   # when attempting to connect.
   local nets_file="$(mktemp)"
   gobonet_backend full-scan "$wifi_interface" 2> /dev/null \
    | gawk ' /Quality/ { quality=$1 } /ESSID/ { print quality " " $0 }' \
    | tr '=/' '\t\t' \
    | sort -n -k2 -r \
    | sed "s,.*ESSID:\"\(.*\)\"$,\1,g" \
    > "$nets_file"
   
   local ok=1
   cat "$nets_file" | while IFS= read essid
   do
      config="$(network_config_file "$essid")"
      if [ -e "$wifi_dir/$config" ]
      then
         connect_wifi "$essid"
         if [ $? = 0 ]
         then
            ok=0
            break
         fi
      fi
   done
   rm "$nets_file"
   return $ok
}

function show_help() {
   echo "GoboNet - an ultra-minimalistic network manager"
   echo ""
   echo "Usage:"
   echo "   gobonet autoconnect"
   echo "              Scan WiFi networks and connect to a known one"
   echo "   gobonet connect \"<essid>\""
   echo "              Connect to a given WiFi network"
   echo "   gobonet connect_no_password \"<essid>\""
   echo "              Connect to a given WiFi network without a password,"
   echo "              if network misreports the need"
   echo "   gobonet connect_wired"
   echo "              Connect to a wired network"
   echo "   gobonet disconnect"
   echo "              Disconnect WiFi and wired interfaces"
   echo "   gobonet forget \"<essid>\""
   echo "              Disconnect WiFi and forget config for this network"
   echo "   gobonet list"
   echo "              List available WiFi networks"
   echo "   gobonet wifi_interface"
   echo "              Print detected WiFi interface"
   echo "   gobonet wired_interface"
   echo "              Print detected wired interface"
   echo ""
   exit 0
}

function usage() {
   echo "gobonet: Usage: $0 $*" 1>&2
   exit 1
}

########## main ##########

wifi_interface="$(detect_wifi_interface)"
wired_interface="$(detect_wired_interface)"
if [ "$wifi_interface" = "" -a "$wired_interface" = "" ]
then
   echo "gobonet: Failed to detect a network interface, aborting." 1>&2
   exit 1
fi

[ "$1" ] || show_help

case "$1" in
   interface|wifi_interface)
      echo "$wifi_interface"
      [ "$wifi_interface" != "" ]
      exit $?
      ;;
   wired_interface)
      echo "$wired_interface"
      [ "$wired_interface" != "" ]
      exit $?
      ;;
   autoconnect)
      [ "$2" = "" ] || usage "autoconnect"
      autoconnect
      ;;
   connect)
      essid="$2"
      [ "$essid" -a "$3" = "" ] || usage "connect \"<essid>\""
      connect_wifi "$essid" && echo "gobonet: Connected to \"$essid\"!"
      ;;
   connect_no_password)
      essid="$2"
      [ "$essid" -a "$3" = "" ] || usage "connect_no_password \"<essid>\""
      connect_wifi "$essid" no_password && echo "gobonet: Connected to \"$essid\"!"
      ;;
   connect_wired)
      [ "$2" = "" ] || usage "connect_wired"
      connect_wired && echo "gobonet: Connected to \"$wired_interface\"!"
      ;;
   disconnect)
      [ "$2" = "" ] || usage "disconnect"
      disconnect
      ;;
   forget)
      essid="$2"
      [ "$essid" -a "$3" = "" ] || usage "forget \"<essid>\""
      forget_wifi "$essid"
      ;;
   list)
      [ "$2" = "" ] || usage "list"
      list_wifi_networks
      ;;
   help)
      show_help
      ;;
   *)
      show_help
      ;;
esac

