#!/bin/bash

wifi_dir="$HOME/.cache/GoboNet/wifi"

function detect_wifi_interface() {
   for iface in /sys/class/net/*
   do
       if grep -q "DEVTYPE=wlan" "$iface/uevent" || [ -e "$iface/phy80211" ]
       then
          basename "$iface"
          return
       fi
   done
}

function show_dialog() {
   local question_type=password
   local dialog_title=
   local dialog_text=
   local backend=any
   
   for arg in "$@"
   do
      case "$arg" in
         --password)
            question_type=password
            ;;
         --msgbox)
            question_type=msgbox
            ;;
         --question)
            question_type=yesno
            ;;
         --title=*)
            dialog_title=${arg#--title=}
            ;;
         --text=*)
            dialog_text=${arg#--text=}
            ;;
         --backend=*)
            backend=${arg#--backend=}
            ;;
      esac
   done
   
   if [ "$backend" = "pinentry" ] || { [ "$backend" = "any" ] && [ "$DISPLAY" ] && which pinentry &> /dev/null ;}
   then
      case "$question_type" in
         password)
            echo -e "SETTITLE $dialog_title\nSETDESC Please enter password\nSETPROMPT Password:\nGETPIN\n" | pinentry | grep "^D " | cut -b3-
            ;;
         msgbox)
            echo -e "SETTITLE $dialog_title\nSETDESC $dialog_text\nMESSAGE\n" | pinentry &> /dev/null
            return 0
            ;;
         yesno)
            if echo -e "SETTITLE $dialog_title\nSETDESC $dialog_text\nSETOK Yes\nSETCANCEL No\nCONFIRM\n" | pinentry | grep -q "^ERR "
            then
               return 1
            else
               return 0
            fi
            ;;
      esac
   elif [ "$backend" = "zenity" ] || { [ "$backend" = "any" ] && [ "$DISPLAY" ] && which zenity &> /dev/null ;}
   then
      case "$question_type" in
         password)
            zenity --no-markup --password --title="$dialog_title" 
            ;;
         msgbox)
            zenity --no-markup --info --title="$dialog_title" --text="$dialog_text"
            return 0
            ;;
         yesno)
            zenity --no-markup --question --title="$dialog_title" --text="$dialog_text"
            ;;
      esac
   else
      # CLI pure Bash backend
      if [ "$dialog_title" != "" ]
      then
         echo "----------------------------------------" > /dev/tty
         echo "$dialog_title" > /dev/tty
         echo "----------------------------------------" > /dev/tty
         echo "" > /dev/tty
      fi
      case "$question_type" in
         password)
            echo -n "Password: " > /dev/tty
            read -s password
            echo "$password"
            ;;
         msgbox)
            echo "$dialog_text" > /dev/tty
            echo "(Press Enter)" > /dev/tty
            read
            return 0
            ;;
         yesno)
            while true
            do
               echo "$dialog_text (y/n)" > /dev/tty
               read 
               if [ "${REPLY:0:1}" = "y" -o "${REPLY:0:1}" = "Y" ]
               then
                  return 0
               elif [ "${REPLY:0:1}" = "n" -o "${REPLY:0:1}" = "N" ]
               then
                  return 1
               fi
            done
            ;;
      esac
   fi
}

function network_config_file() {
   local essid="$1"
   local sanit=$(echo "$essid" | tr -Cd '[:alnum:]')
   echo "$sanit-"$(echo "$essid" | md5sum | cut -d' ' -f1)
}

function connect_wifi() {   
   local essid="$1"
   local file="$(network_config_file "$essid")"
   
   if ! [ -e "$wifi_dir/$file" ]
   then

      info=$(gobonet_backend quick-scan "$interface" | grep -B 1 -F "ESSID:\"$essid\"")
      if [ $? != 0 ]
      then
         info=$(gobonet_backend full-scan "$interface" | grep -B 1 -F "ESSID:\"$essid\"")
      fi
      info=$(echo "$info" | head -n 2)
      if echo "$info" | grep "Encryption key:off"
      then
         {
            echo "network={"
            echo "   ssid=\"$essid\""
            echo "   key_mgmt=NONE"
            echo "}"
         } > "$wifi_dir/$file"
      else
         mkdir -p "$wifi_dir" || return 1
         chmod 0700 "$wifi_dir" || return 1
         pass=$(show_dialog --password --title="Connect to $essid")
         if [ $? = 1 ]
         then
            return 1
         fi
         echo "$pass" | wpa_passphrase "$essid" > "$wifi_dir/$file"
         if [ $? = 1 ]
         then
            show_dialog --msgbox --title="Error" --text="$(grep -v " *#" "$wifi_dir/$file")"
            rm "$wifi_dir/$file"
            return 1
         fi
      fi
   fi
   
   echo $$ > "$wifi_dir/.connecting.pid"
   gobonet_backend connect "$wifi_dir/$file" "$interface"
}

function disconnect_wifi() {
   gobonet_backend disconnect "$interface"
}

function forget_wifi() {
   local essid="$1"
   local file="$(network_config_file "$essid")"
   
   if show_dialog --question --title="Forget $essid" --text="Are you sure you want to forget network '$essid'?"
   then
      disconnect_wifi "$essid"
      rm -f "$wifi_dir/$file"
   fi   
}

function list_wifi_networks() {
   echo "Available networks:"
   echo 
   
   gobonet_backend full-scan "$interface" 2> /dev/null | grep ESSID | sed "s,.*ESSID:\(.*\),\1,g"
   
   echo
   echo "Type"
   echo "   gobonet connect \"<network>\""
   echo "to connect."
}

function autoconnect_wifi() {
   if [ "$SSH_CONNECTION" ]
   then
      echo "gobonet: Will not autoconnect over a remote login." 1>&2
      exit 1
   fi
   if ifconfig "$interface" | grep -q "inet6\? addr:"
   then
      echo "gobonet: Interface $interface is already connected." 1>&2
      exit 1
   fi
   local nets_file="$(mktemp)"
   gobonet_backend full-scan "$interface" 2> /dev/null \
    | grep ESSID \
    | sed "s,.*ESSID:\"\(.*\)\"$,\1,g" \
    | while read essid
   do
      echo -e "$(network_config_file "$essid")\t$essid" >> "$nets_file"
   done
   
   ls "$wifi_dir" --sort=time | while read config
   do
      pair="$(grep "$config"$'\t' "$nets_file" | head -n 1)"
      if [ "$pair" ]
      then
         essid=$(echo "$pair" | cut -f2)
         connect_wifi "$essid"
         if [ $? = 0 ]
         then
            return
         fi
      fi
   done
   return 1
}

function show_help() {
   echo "GoboNet - an ultra-minimalistic network manager"
   echo ""
   echo "Usage:"
   echo "   gobonet autoconnect"
   echo "              Scan Wifi networks and connect to a known one"
   echo "   gobonet connect \"<essid>\""
   echo "              Connect to a given Wifi network"
   echo "   gobonet disconnect"
   echo "              Disconnect Wifi"
   echo "   gobonet forget \"<essid>\""
   echo "              Disconnect Wifi and forget config for this network"
   echo "   gobonet list"
   echo "              List available Wifi networks"
   echo ""
   exit 0
}

function usage() {
   echo "gobonet: Usage: $0 $*" 1>&2
   exit 1
}

########## main ##########

interface="$(detect_wifi_interface)"
if [ "$interface" = "" ]
then
   echo "gobonet: Failed to detect a wifi network interface, aborting." 1>&2
   exit 1
fi

[ "$1" ] || show_help

case "$1" in
   interface)
      echo "$interface"
      exit 0
      ;;
   autoconnect)
      [ "$2" = "" ] || usage "autoconnect"
      autoconnect_wifi
      ;;
   connect)
      essid="$2"
      [ "$essid" -a "$3" = "" ] || usage "connect \"<essid>\""
      connect_wifi "$essid" && echo "gobonet: Connected to \"$essid\"!"
      ;;
   disconnect)
      [ "$2" = "" ] || usage "disconnect"
      disconnect_wifi
      ;;
   forget)
      essid="$2"
      [ "$essid" -a "$3" = "" ] || usage "forget \"<essid>\""
      forget_wifi "$essid"
      ;;
   list)
      [ "$2" = "" ] || usage "list"
      list_wifi_networks
      ;;
   help)
      show_help
      ;;
   *)
      show_help
      ;;
esac

